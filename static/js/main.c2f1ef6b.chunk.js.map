{"version":3,"sources":["welcomeBox/welcomeBox.js","workingTitle/workingTitle.js","tabMenu/tabMenu.js","header/header.js","serviceWorker.js","index.js"],"names":["WelcomeBox","props","class","React","Component","WorkingTitle","className","width","height","src","frameborder","allow","allowfullscreen","TabMenu","Header","Boolean","window","location","hostname","match","baseElement","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"kUAkBeA,G,oEAdb,WAAYC,GAAQ,uCACZA,G,qDAIN,OACE,yBAAKC,MAAM,cACT,4L,GARiBC,IAAMC,YCchBC,G,wDAbb,WAAYJ,GAAQ,uCACZA,G,qDAIN,OACE,yBAAKK,UAAU,gBACrB,4BAAQC,MAAM,MAAMC,OAAO,MAAMC,IAAI,sDAAsDC,YAAY,IAAIC,MAAM,0EAA0EC,iBAAe,IADpM,c,GAPqBT,IAAMC,YC+BlBS,E,kDA1Bb,WAAYZ,GAAQ,uCACZA,G,qDAIN,OACE,kBAAC,IAAD,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,iBACA,kBAAC,IAAD,qBACA,kBAAC,IAAD,kBAEF,kBAAC,IAAD,KACE,kBAAC,EAAD,OAEF,kBAAC,IAAD,KACE,kBAAC,EAAD,OAEF,kBAAC,IAAD,W,GAnBcE,IAAMC,WCqBbU,G,wDAxBb,WAAYb,GAAQ,uCACZA,G,qDAIN,OACE,yBAAKK,UAAU,UACb,yBAAKA,UAAU,YACb,uBAAGA,UAAU,QAAb,8DAGA,uBAAGA,UAAU,aAAb,yCAGA,uBAAGA,UAAU,SAAb,iD,GAfWH,IAAMC,YCSPW,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXN,IAAMC,EACJ,6BACE,kBAAC,EAAD,MACA,kBAAC,EAAD,OAIJC,IAASC,OACPF,EACAG,SAASC,eAAe,SDmHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.c2f1ef6b.chunk.js","sourcesContent":["import React from '../../node_modules/react';\nimport './welcomeBox.css';\n\nclass WelcomeBox extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n  //getDerivedStateFromProps() {}\n  render() {\n    return (\n      <div class='WelcomeBox'>\n        <h1>Software Engineer, Stock Market Enthusiast, INTJ-A, Gamer, Raver, Runner, Would do unspeakable things for 5 minutes of Elon Musk's undivided attention.</h1>\n      </div>\n    );\n  }\n  //componentDidMount()\n}\n\nexport default WelcomeBox;","import React from 'react';\nimport './workingTitle.css';\n\nclass WorkingTitle extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n  //getDerivedStateFromProps() {}\n  render() {\n    return (\n      <div className='WorkingTitle'>\n<iframe width=\"706\" height=\"397\" src=\"https://www.youtube.com/embed/9bR_n1BBTtI?start=625\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>      </div>\n    );\n  }\n  //componentDidMount()\n}\n\nexport default WorkingTitle;","import React from 'react';\nimport { TabList, Tab, Tabs, TabPanel } from 'react-tabs';\nimport 'react-tabs/style/react-tabs.css';\nimport './tabMenu.css';\nimport WelcomeBox from '../welcomeBox/welcomeBox.js';\nimport WorkingTitle from '../workingTitle/workingTitle.js';\n\nclass TabMenu extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n  //getDerivedStateFromProps() {}\n  render() {\n    return (\n      <Tabs>\n        <TabList>\n          <Tab>Welcome!</Tab>\n          <Tab>Guru Maxwell</Tab>\n          <Tab>Hire Me?</Tab>\n        </TabList>\n        <TabPanel>\n          <WelcomeBox />\n        </TabPanel>\n        <TabPanel>\n          <WorkingTitle />\n        </TabPanel>\n        <TabPanel>\n        </TabPanel>\n      </Tabs>\n    );\n  }\n  //componentDidMount()\n}\n\nexport default TabMenu;","import React from '../../node_modules/react';\nimport './header.css';\n\nclass Header extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n  //getDerivedStateFromProps() {}\n  render() {\n    return (\n      <div className='Header'>\n        <div className=\"quoteBox\">\n          <p className=\"Link\">\n            \"Give me the Courage to accept that which I cannot change,\n          </p>\n          <p className=\"Ganondorf\">\n            the Power to change that which I can,\n          </p>\n          <p className=\"Zelda\">\n            and the Wisdom to know the difference.\"\n          </p>\n        </div>\n      </div>\n    );\n  }\n  //componentDidMount()\n}\n\nexport default Header;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport TabMenu from './tabMenu/tabMenu.js';\nimport Header from './header/header.js';\nimport * as serviceWorker from './serviceWorker';\n\nconst baseElement = (\n  <div>\n    <Header />\n    <TabMenu />\n  </div>\n);\n\nReactDOM.render(\n  baseElement,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}